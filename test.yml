trigger:
  branches:
    include:
    - main
    - develop
  paths:
    exclude:
    - README.md
    - '**/*.md'

parameters:
  - name: environment
    displayName: Environment
    type: string
    default: dev
    values:
      - dev
      - stage
      - prod
  - name: cloudProvider
    displayName: Cloud Provider
    type: string
    default: aws
    values:
      - aws
      - azure

variables:
  terraformVersion: '1.3.0'

stages:
  - stage: Validate
    displayName: 'Validate Infrastructure'
    jobs:
      - job: Validate
        displayName: 'Validate Terraform'
        steps:
          - task: TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: \$(terraformVersion)

          - script: |
              cd environments/\${{ parameters.environment }}
              terraform init -backend=false
              terraform validate
            displayName: 'Validate Terraform Configuration'

          - script: |
              cd environments/\${{ parameters.environment }}
              terraform fmt -check -recursive
            displayName: 'Check Terraform Format'

  - stage: Plan
    displayName: 'Plan Infrastructure Changes'
    dependsOn: Validate
    jobs:
      - job: Plan
        displayName: 'Terraform Plan'
        steps:
          - task: TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: \$(terraformVersion)

          - task: AzureCLI@2
            displayName: 'Initialize Azure'
            condition: eq('\${{ parameters.cloudProvider }}', 'azure')
            inputs:
              azureSubscription: 'Azure-Service-Connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az --version

          - task: AWSShellScript@1
            displayName: 'Initialize AWS'
            condition: eq('\${{ parameters.cloudProvider }}', 'aws')
            inputs:
              awsCredentials: 'AWS-Service-Connection'
              regionName: 'us-west-2'
              scriptType: 'inline'
              inlineScript: |
                aws --version

          - script: |
              cd environments/\${{ parameters.environment }}
              terraform workspace select \${{ parameters.environment }} || terraform workspace new \${{ parameters.environment }}
            displayName: 'Select Terraform Workspace'

          - script: |
              cd environments/\${{ parameters.environment }}
              if [ "\${{ parameters.cloudProvider }}" = "aws" ]; then
                terraform init -backend-config=../../backend/s3.tf
              else
                terraform init -backend-config=../../backend/azurerm.tf
              fi
            displayName: 'Initialize Terraform'

          - script: |
              cd environments/\${{ parameters.environment }}
              terraform plan -var-file=terraform.tfvars -var="cloud_provider=\${{ parameters.cloudProvider }}" -out=tfplan
            displayName: 'Generate Terraform Plan'

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: 'environments/\${{ parameters.environment }}/tfplan'
              artifact: 'tfplan'
              publishLocation: 'pipeline'
            displayName: 'Publish Terraform Plan'

  - stage: Apply
    displayName: 'Apply Infrastructure Changes'
    dependsOn: Plan
    jobs:
      - job: Apply
        displayName: 'Terraform Apply'
        steps:
          - task: TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: \$(terraformVersion)

          - task: AzureCLI@2
            displayName: 'Initialize Azure'
            condition: eq('\${{ parameters.cloudProvider }}', 'azure')
            inputs:
              azureSubscription: 'Azure-Service-Connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az --version

          - task: AWSShellScript@1
            displayName: 'Initialize AWS'
            condition: eq('\${{ parameters.cloudProvider }}', 'aws')
            inputs:
              awsCredentials: 'AWS-Service-Connection'
              regionName: 'us-west-2'
              scriptType: 'inline'
              inlineScript: |
                aws --version

          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: 'tfplan'
              targetPath: 'environments/\${{ parameters.environment }}'
            displayName: 'Download Terraform Plan'

          - script: |
              cd environments/\${{ parameters.environment }}
              terraform workspace select \${{ parameters.environment }} || terraform workspace new \${{ parameters.environment }}
            displayName: 'Select Terraform Workspace'

          - script: |
              cd environments/\${{ parameters.environment }}
              if [ "\${{ parameters.cloudProvider }}" = "aws" ]; then
                terraform init -backend-config=../../backend/s3.tf
              else
                terraform init -backend-config=../../backend/azurerm.tf
              fi
            displayName: 'Initialize Terraform'

          - script: |
              cd environments/\${{ parameters.environment }}
              terraform apply -auto-approve tfplan
            displayName: 'Apply Terraform Changes'

          - script: |
              cd environments/\${{ parameters.environment }}
              if [ "\${{ parameters.cloudProvider }}" = "aws" ]; then
                aws eks update-kubeconfig --name \$(terraform output -raw cluster_name) --region us-west-2
              else
                az aks get-credentials --resource-group \$(terraform output -raw resource_group_name) --name \$(terraform output -raw cluster_name) --overwrite-existing
              fi
              kubectl get nodes -o wide
            displayName: 'Verify Kubernetes Cluster'